--- libunwind/src/ptrace/_UPT_access_reg.c	2015-08-18 09:43:41.000000000 +0300
+++ patches/_UPT_access_reg.c	2015-08-18 10:23:01.000000000 +0300
@@ -32,6 +32,8 @@
 #   include <asm/ptrace_offsets.h>
 # endif
 # include "tdep-ia64/rse.h"
+#elif defined(__aarch64__)
+# include <sys/uio.h>
 #endif
 
 #if HAVE_DECL_PTRACE_POKEUSER || HAVE_TTRACE
@@ -239,13 +241,13 @@
 #else
   errno = 0;
   if (write)
-    ptrace (PTRACE_POKEUSER, pid, _UPT_reg_offset[reg], *val);
+    ptrace (PTRACE_POKEUSER, pid, (void*) (uintptr_t) _UPT_reg_offset[reg], (void*) *val);
   else {
 #if UNW_DEBUG
     Debug(16, "ptrace PEEKUSER pid: %lu , reg: %lu , offs: %lu\n", (unsigned long)pid, (unsigned long)reg,
         (unsigned long)_UPT_reg_offset[reg]);
 #endif
-    *val = ptrace (PTRACE_PEEKUSER, pid, _UPT_reg_offset[reg], 0);
+    *val = ptrace (PTRACE_PEEKUSER, pid, (void*) (uintptr_t) _UPT_reg_offset[reg], 0);
   }
   if (errno) {
 #if UNW_DEBUG
@@ -304,6 +306,60 @@
   Debug (1, "bad register %s [%u] (error: %s)\n", unw_regname(reg), reg, strerror (errno));
   return -UNW_EBADREG;
 }
+#elif HAVE_DECL_PT_GETREGSET
+int
+_UPT_access_reg (unw_addr_space_t as, unw_regnum_t reg, unw_word_t *val,
+         int write, void *arg)
+{
+  struct UPT_info *ui = arg;
+  pid_t pid = ui->pid;
+#if defined(__aarch64__)
+  struct user_pt_regs regs;
+  struct iovec io;
+  io.iov_base = &regs;
+  io.iov_len = sizeof(regs);
+
+#if UNW_DEBUG
+  Debug(16, "using getregset: reg: %s [%u], val: %lx, write: %u\n", unw_regname(reg), (unsigned) reg, (long) val, write);
+
+  if (write)
+    Debug (16, "%s [%u] <- %lx\n", unw_regname (reg), (unsigned) reg, (long) *val);
+#endif
+  if (ptrace(PTRACE_GETREGSET, pid, (void*)NT_PRSTATUS, (void*)&io) == -1)
+    goto badreg;
+  if (write)
+    {
+      if (reg == UNW_AARCH64_SP)
+        regs.sp = *val;
+      else if (reg == UNW_AARCH64_PC)
+        regs.pc = *val;
+      else if (reg < UNW_AARCH64_SP)
+        regs.regs[reg] = *val;
+      else
+        goto badreg;
+      if (ptrace(PTRACE_SETREGSET, pid, (void*)NT_PRSTATUS, (void*)&io) == -1)
+        goto badreg;
+    }
+  else
+    {
+      if (reg == UNW_AARCH64_SP)
+        *val = regs.sp;
+      else if (reg == UNW_AARCH64_PC)
+        *val = regs.pc;
+      else if (reg < UNW_AARCH64_SP)
+        *val = regs.regs[reg];
+      else
+        goto badreg;
+    }
+#else
+#error Unsupported architecture for getregset
+#endif
+  return 0;
+
+ badreg:
+  Debug (1, "bad register %s [%u] (error: %s)\n", unw_regname(reg), reg, strerror (errno));
+  return -UNW_EBADREG;
+}
 #else
 #error Port me
 #endif
